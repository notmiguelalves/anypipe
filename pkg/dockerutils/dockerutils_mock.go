// Code generated by MockGen. DO NOT EDIT.
// Source: dockerutils.go
//
// Generated by this command:
//
//	mockgen -destination=dockerutils_mock.go -package=dockerutils -source=dockerutils.go DockerUtils
//

// Package dockerutils is a generated GoMock package.
package dockerutils

import (
	bytes "bytes"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDockerUtils is a mock of DockerUtils interface.
type MockDockerUtils struct {
	ctrl     *gomock.Controller
	recorder *MockDockerUtilsMockRecorder
}

// MockDockerUtilsMockRecorder is the mock recorder for MockDockerUtils.
type MockDockerUtilsMockRecorder struct {
	mock *MockDockerUtils
}

// NewMockDockerUtils creates a new mock instance.
func NewMockDockerUtils(ctrl *gomock.Controller) *MockDockerUtils {
	mock := &MockDockerUtils{ctrl: ctrl}
	mock.recorder = &MockDockerUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerUtils) EXPECT() *MockDockerUtilsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDockerUtils) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDockerUtilsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDockerUtils)(nil).Close))
}

// CopyBetweenContainers mocks base method.
func (m *MockDockerUtils) CopyBetweenContainers(srcContainer, destContainer *Container, srcPath, dstPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyBetweenContainers", srcContainer, destContainer, srcPath, dstPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyBetweenContainers indicates an expected call of CopyBetweenContainers.
func (mr *MockDockerUtilsMockRecorder) CopyBetweenContainers(srcContainer, destContainer, srcPath, dstPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyBetweenContainers", reflect.TypeOf((*MockDockerUtils)(nil).CopyBetweenContainers), srcContainer, destContainer, srcPath, dstPath)
}

// CopyFrom mocks base method.
func (m *MockDockerUtils) CopyFrom(c *Container, srcPath, dstPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFrom", c, srcPath, dstPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockDockerUtilsMockRecorder) CopyFrom(c, srcPath, dstPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockDockerUtils)(nil).CopyFrom), c, srcPath, dstPath)
}

// CopyTo mocks base method.
func (m *MockDockerUtils) CopyTo(c *Container, srcPath, dstPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyTo", c, srcPath, dstPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyTo indicates an expected call of CopyTo.
func (mr *MockDockerUtilsMockRecorder) CopyTo(c, srcPath, dstPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyTo", reflect.TypeOf((*MockDockerUtils)(nil).CopyTo), c, srcPath, dstPath)
}

// CreateContainer mocks base method.
func (m *MockDockerUtils) CreateContainer(image string) (*Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", image)
	ret0, _ := ret[0].(*Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockDockerUtilsMockRecorder) CreateContainer(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockDockerUtils)(nil).CreateContainer), image)
}

// Exec mocks base method.
func (m *MockDockerUtils) Exec(c *Container, cmd string) (*bytes.Buffer, *bytes.Buffer, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", c, cmd)
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(*bytes.Buffer)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Exec indicates an expected call of Exec.
func (mr *MockDockerUtilsMockRecorder) Exec(c, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDockerUtils)(nil).Exec), c, cmd)
}
